version: '3.8'

services:
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - app-network
    develop:
      watch:
        - action: sync
          path: ./frontend
          target: /app
          ignore:
            - node_modules
            - .next
        - action: rebuild
          path: package.json

  backend:
    build: ./backend
    ports:
      - "5000:5000"
    stdin_open: true
    tty: true
    environment:
      - DATABASE_URL=postgresql://user:password@database:5432/appdb?schema=public
    command: bash -c "npx prisma migrate reset --force && npx prisma migrate dev --name init && npx prisma generate && npm run dev"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    develop:
      watch:
        - action: sync+restart
          path: ./backend
          target: /app
          ignore:
            - node_modules
        - action: rebuild
          path: package.json

  redis:
    image: redis:latest
    container_name: redis
    networks:
      - app-network
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  database:
    image: postgres:17
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: appdb
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d appdb"]
      interval: 5s
      timeout: 2s
      retries: 20
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command: postgres -c listen_addresses='*'
    logging:
      options:
        max-size: "10m"
        max-file: "3"
        
  zookeeper:
    image: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

  kafka:
    image: confluentinc/cp-kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - app-network
    links:
      - zookeeper

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
